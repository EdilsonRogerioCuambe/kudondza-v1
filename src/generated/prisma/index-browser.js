
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role',
  status: 'status',
  bio: 'bio',
  location: 'location',
  website: 'website',
  socialLinks: 'socialLinks',
  preferences: 'preferences',
  lastLoginAt: 'lastLoginAt',
  loginCount: 'loginCount',
  isOnline: 'isOnline',
  timezone: 'timezone',
  language: 'language',
  theme: 'theme'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  icon: 'icon',
  color: 'color',
  image: 'image',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  sortOrder: 'sortOrder',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  courseCount: 'courseCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parentId: 'parentId'
};

exports.Prisma.SubcategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  icon: 'icon',
  color: 'color',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  courseCount: 'courseCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  thumbnail: 'thumbnail',
  trailer: 'trailer',
  courseMaterials: 'courseMaterials',
  categoryId: 'categoryId',
  subcategoryId: 'subcategoryId',
  tags: 'tags',
  level: 'level',
  language: 'language',
  duration: 'duration',
  price: 'price',
  originalPrice: 'originalPrice',
  currency: 'currency',
  isPublic: 'isPublic',
  isPremium: 'isPremium',
  allowDownload: 'allowDownload',
  hasPrerequisites: 'hasPrerequisites',
  seriesId: 'seriesId',
  unlockCriteria: 'unlockCriteria',
  status: 'status',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  xpReward: 'xpReward',
  badgeId: 'badgeId',
  instructorId: 'instructorId',
  viewCount: 'viewCount',
  downloadCount: 'downloadCount',
  shareCount: 'shareCount',
  favoriteCount: 'favoriteCount',
  isFeatured: 'isFeatured',
  featuredAt: 'featuredAt',
  trendingScore: 'trendingScore'
};

exports.Prisma.CoursePrerequisiteScalarFieldEnum = {
  id: 'id',
  isRequired: 'isRequired',
  minimumProgress: 'minimumProgress',
  courseId: 'courseId',
  prerequisiteId: 'prerequisiteId'
};

exports.Prisma.CourseSeriesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  thumbnail: 'thumbnail',
  isSequential: 'isSequential',
  level: 'level',
  categoryId: 'categoryId',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseRelationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  strength: 'strength',
  sourceCourseId: 'sourceCourseId',
  targetCourseId: 'targetCourseId'
};

exports.Prisma.LearningPathScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  isPublic: 'isPublic',
  isTemplate: 'isTemplate',
  creatorId: 'creatorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LearningPathCourseScalarFieldEnum = {
  id: 'id',
  order: 'order',
  notes: 'notes',
  pathId: 'pathId',
  courseId: 'courseId'
};

exports.Prisma.LearningPathFollowerScalarFieldEnum = {
  id: 'id',
  followedAt: 'followedAt',
  userId: 'userId',
  pathId: 'pathId'
};

exports.Prisma.CourseRecommendationScalarFieldEnum = {
  id: 'id',
  score: 'score',
  reason: 'reason',
  context: 'context',
  userId: 'userId',
  courseId: 'courseId',
  isViewed: 'isViewed',
  isAccepted: 'isAccepted',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.RoadmapScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  shortDescription: 'shortDescription',
  thumbnail: 'thumbnail',
  categoryId: 'categoryId',
  subcategoryId: 'subcategoryId',
  tags: 'tags',
  level: 'level',
  language: 'language',
  estimatedDuration: 'estimatedDuration',
  totalCourses: 'totalCourses',
  isPublic: 'isPublic',
  isPremium: 'isPremium',
  isOfficial: 'isOfficial',
  status: 'status',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  creatorId: 'creatorId'
};

exports.Prisma.RoadmapPathScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  order: 'order',
  isRequired: 'isRequired',
  isParallel: 'isParallel',
  unlockCriteria: 'unlockCriteria',
  roadmapId: 'roadmapId'
};

exports.Prisma.RoadmapCourseScalarFieldEnum = {
  id: 'id',
  order: 'order',
  isRequired: 'isRequired',
  isOptional: 'isOptional',
  unlockCriteria: 'unlockCriteria',
  pathId: 'pathId',
  courseId: 'courseId'
};

exports.Prisma.RoadmapEnrollmentScalarFieldEnum = {
  id: 'id',
  enrolledAt: 'enrolledAt',
  completedAt: 'completedAt',
  progress: 'progress',
  coursesStarted: 'coursesStarted',
  coursesCompleted: 'coursesCompleted',
  status: 'status',
  currentPathId: 'currentPathId',
  currentCourseId: 'currentCourseId',
  userId: 'userId',
  roadmapId: 'roadmapId'
};

exports.Prisma.RoadmapAnalyticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  views: 'views',
  enrollments: 'enrollments',
  completions: 'completions',
  avgCompletionTime: 'avgCompletionTime',
  dropoffRate: 'dropoffRate',
  roadmapId: 'roadmapId'
};

exports.Prisma.ModuleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  order: 'order',
  isRequired: 'isRequired',
  isPublic: 'isPublic',
  unlockCriteria: 'unlockCriteria',
  xpReward: 'xpReward',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  courseId: 'courseId'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  shortDescription: 'shortDescription',
  order: 'order',
  slug: 'slug',
  videoId: 'videoId',
  videoUrl: 'videoUrl',
  videoDuration: 'videoDuration',
  transcript: 'transcript',
  isPreview: 'isPreview',
  isRequired: 'isRequired',
  isPublic: 'isPublic',
  unlockCriteria: 'unlockCriteria',
  xpReward: 'xpReward',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  moduleId: 'moduleId'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  url: 'url',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  downloadable: 'downloadable',
  lessonId: 'lessonId',
  createdAt: 'createdAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  enrolledAt: 'enrolledAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt',
  status: 'status',
  progress: 'progress',
  notifications: 'notifications',
  allowTracking: 'allowTracking',
  userId: 'userId',
  courseId: 'courseId'
};

exports.Prisma.ProgressScalarFieldEnum = {
  id: 'id',
  completed: 'completed',
  completedAt: 'completedAt',
  timeSpent: 'timeSpent',
  lastAccessed: 'lastAccessed',
  watchProgress: 'watchProgress',
  userId: 'userId',
  lessonId: 'lessonId'
};

exports.Prisma.GamificationScalarFieldEnum = {
  id: 'id',
  totalXP: 'totalXP',
  currentLevel: 'currentLevel',
  xpToNextLevel: 'xpToNextLevel',
  currentStreak: 'currentStreak',
  longestStreak: 'longestStreak',
  lastStudyDate: 'lastStudyDate',
  coursesCompleted: 'coursesCompleted',
  lessonsCompleted: 'lessonsCompleted',
  quizzesCompleted: 'quizzesCompleted',
  certificatesEarned: 'certificatesEarned',
  userId: 'userId'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  color: 'color',
  rarity: 'rarity',
  xpReward: 'xpReward',
  criteria: 'criteria',
  isActive: 'isActive',
  isLimited: 'isLimited',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  earnedAt: 'earnedAt',
  userId: 'userId',
  badgeId: 'badgeId',
  gamificationId: 'gamificationId'
};

exports.Prisma.XPHistoryScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  reason: 'reason',
  source: 'source',
  sourceId: 'sourceId',
  earnedAt: 'earnedAt',
  userId: 'userId',
  gamificationId: 'gamificationId'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  media: 'media',
  metadata: 'metadata',
  isPublic: 'isPublic',
  allowComments: 'allowComments',
  viewCount: 'viewCount',
  reactionCount: 'reactionCount',
  commentCount: 'commentCount',
  shareCount: 'shareCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  courseId: 'courseId'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  parentId: 'parentId',
  reactionCount: 'reactionCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  authorId: 'authorId',
  postId: 'postId'
};

exports.Prisma.ReactionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  createdAt: 'createdAt',
  userId: 'userId',
  postId: 'postId',
  commentId: 'commentId'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  followerId: 'followerId',
  followingId: 'followingId'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  avatar: 'avatar',
  cover: 'cover',
  type: 'type',
  maxMembers: 'maxMembers',
  allowInvites: 'allowInvites',
  requireApproval: 'requireApproval',
  courseId: 'courseId',
  memberCount: 'memberCount',
  postCount: 'postCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  creatorId: 'creatorId'
};

exports.Prisma.GroupMemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  joinedAt: 'joinedAt',
  userId: 'userId',
  groupId: 'groupId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  type: 'type',
  attachments: 'attachments',
  metadata: 'metadata',
  isEdited: 'isEdited',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  senderId: 'senderId'
};

exports.Prisma.MessageRecipientScalarFieldEnum = {
  id: 'id',
  isRead: 'isRead',
  readAt: 'readAt',
  messageId: 'messageId',
  recipientId: 'recipientId'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  certificateNumber: 'certificateNumber',
  verificationCode: 'verificationCode',
  title: 'title',
  description: 'description',
  templateData: 'templateData',
  certificateUrl: 'certificateUrl',
  isValid: 'isValid',
  validUntil: 'validUntil',
  issuedAt: 'issuedAt',
  createdAt: 'createdAt',
  userId: 'userId',
  courseId: 'courseId'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  order: 'order',
  timeLimit: 'timeLimit',
  passingScore: 'passingScore',
  maxAttempts: 'maxAttempts',
  shuffleQuestions: 'shuffleQuestions',
  showResults: 'showResults',
  xpReward: 'xpReward',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  moduleId: 'moduleId'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  explanation: 'explanation',
  points: 'points',
  order: 'order',
  options: 'options',
  correctAnswers: 'correctAnswers',
  quizId: 'quizId'
};

exports.Prisma.QuizAttemptScalarFieldEnum = {
  id: 'id',
  answers: 'answers',
  score: 'score',
  timeSpent: 'timeSpent',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  userId: 'userId',
  quizId: 'quizId'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  isPublic: 'isPublic',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  courseId: 'courseId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  data: 'data',
  actionUrl: 'actionUrl',
  isRead: 'isRead',
  readAt: 'readAt',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  userId: 'userId'
};

exports.Prisma.PlaylistScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isPublic: 'isPublic',
  autoRemoveCompleted: 'autoRemoveCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PlaylistItemScalarFieldEnum = {
  id: 'id',
  order: 'order',
  lessonId: 'lessonId',
  courseId: 'courseId',
  addedAt: 'addedAt',
  playlistId: 'playlistId'
};

exports.Prisma.UserAnalyticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  timeSpent: 'timeSpent',
  lessonsWatched: 'lessonsWatched',
  xpEarned: 'xpEarned',
  loginCount: 'loginCount',
  userId: 'userId'
};

exports.Prisma.CourseAnalyticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  views: 'views',
  enrollments: 'enrollments',
  completions: 'completions',
  revenue: 'revenue',
  avgRating: 'avgRating',
  courseId: 'courseId'
};

exports.Prisma.LessonAnalyticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  views: 'views',
  completions: 'completions',
  avgWatchTime: 'avgWatchTime',
  dropoffRate: 'dropoffRate',
  lessonId: 'lessonId'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  instructions: 'instructions',
  dueDate: 'dueDate',
  maxSubmissions: 'maxSubmissions',
  allowLateSubmission: 'allowLateSubmission',
  maxPoints: 'maxPoints',
  rubric: 'rubric',
  xpReward: 'xpReward',
  moduleId: 'moduleId'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  content: 'content',
  attachments: 'attachments',
  score: 'score',
  feedback: 'feedback',
  gradedAt: 'gradedAt',
  status: 'status',
  submittedAt: 'submittedAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  assignmentId: 'assignmentId'
};

exports.Prisma.MentorSessionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  duration: 'duration',
  price: 'price',
  meetingUrl: 'meetingUrl',
  scheduledAt: 'scheduledAt',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  status: 'status',
  mentorRating: 'mentorRating',
  menteeRating: 'menteeRating',
  mentorFeedback: 'mentorFeedback',
  menteeFeedback: 'menteeFeedback',
  mentorId: 'mentorId',
  menteeId: 'menteeId'
};

exports.Prisma.CompetitionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  rules: 'rules',
  type: 'type',
  maxParticipants: 'maxParticipants',
  prizes: 'prizes',
  startDate: 'startDate',
  endDate: 'endDate',
  registrationEnd: 'registrationEnd',
  status: 'status'
};

exports.Prisma.CompetitionParticipantScalarFieldEnum = {
  id: 'id',
  score: 'score',
  rank: 'rank',
  metrics: 'metrics',
  joinedAt: 'joinedAt',
  userId: 'userId',
  competitionId: 'competitionId'
};

exports.Prisma.UserGoalScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  target: 'target',
  current: 'current',
  unit: 'unit',
  isActive: 'isActive',
  isRecurring: 'isRecurring',
  period: 'period',
  startDate: 'startDate',
  endDate: 'endDate',
  completedAt: 'completedAt',
  userId: 'userId'
};

exports.Prisma.DailyChallengeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  target: 'target',
  reward: 'reward',
  isActive: 'isActive',
  isRecurring: 'isRecurring',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.UserChallengeScalarFieldEnum = {
  id: 'id',
  progress: 'progress',
  completed: 'completed',
  completedAt: 'completedAt',
  startedAt: 'startedAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  challengeId: 'challengeId'
};

exports.Prisma.LevelRewardScalarFieldEnum = {
  id: 'id',
  level: 'level',
  title: 'title',
  description: 'description',
  type: 'type',
  value: 'value',
  xpReward: 'xpReward',
  isActive: 'isActive'
};

exports.Prisma.UserLevelRewardScalarFieldEnum = {
  id: 'id',
  earnedAt: 'earnedAt',
  userId: 'userId',
  levelRewardId: 'levelRewardId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  changes: 'changes',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  userId: 'userId',
  timestamp: 'timestamp'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  action: 'action',
  details: 'details',
  courseId: 'courseId',
  lessonId: 'lessonId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.FileUploadScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  fileKey: 'fileKey',
  fileUrl: 'fileUrl',
  fileType: 'fileType',
  fileSize: 'fileSize',
  contentType: 'contentType',
  fileExtension: 'fileExtension',
  description: 'description',
  tags: 'tags',
  uploadStatus: 'uploadStatus',
  uploadedAt: 'uploadedAt',
  expiresAt: 'expiresAt',
  tempUpload: 'tempUpload',
  userId: 'userId',
  courseId: 'courseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  STUDENT: 'STUDENT',
  INSTRUCTOR: 'INSTRUCTOR',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  BANNED: 'BANNED'
};

exports.CourseLevel = exports.$Enums.CourseLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

exports.CourseStatus = exports.$Enums.CourseStatus = {
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
  SUSPENDED: 'SUSPENDED'
};

exports.CourseRelationType = exports.$Enums.CourseRelationType = {
  PREREQUISITE: 'PREREQUISITE',
  RECOMMENDED: 'RECOMMENDED',
  SIMILAR: 'SIMILAR',
  COMPLEMENTARY: 'COMPLEMENTARY',
  ALTERNATIVE: 'ALTERNATIVE',
  SEQUEL: 'SEQUEL',
  PART_OF_SERIES: 'PART_OF_SERIES'
};

exports.RecommendationReason = exports.$Enums.RecommendationReason = {
  SIMILAR_INTERESTS: 'SIMILAR_INTERESTS',
  COMPLETION_PATTERN: 'COMPLETION_PATTERN',
  POPULAR_COMBINATION: 'POPULAR_COMBINATION',
  SKILL_GAP: 'SKILL_GAP',
  CAREER_PATH: 'CAREER_PATH',
  TRENDING: 'TRENDING',
  INSTRUCTOR_RECOMMENDATION: 'INSTRUCTOR_RECOMMENDATION',
  AI_SUGGESTION: 'AI_SUGGESTION'
};

exports.RoadmapStatus = exports.$Enums.RoadmapStatus = {
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
  DEPRECATED: 'DEPRECATED'
};

exports.EnrollmentStatus = exports.$Enums.EnrollmentStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  SUSPENDED: 'SUSPENDED',
  EXPIRED: 'EXPIRED'
};

exports.ResourceType = exports.$Enums.ResourceType = {
  PDF: 'PDF',
  DOCUMENT: 'DOCUMENT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  LINK: 'LINK',
  CODE: 'CODE'
};

exports.BadgeRarity = exports.$Enums.BadgeRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

exports.XPSource = exports.$Enums.XPSource = {
  LESSON_COMPLETED: 'LESSON_COMPLETED',
  QUIZ_COMPLETED: 'QUIZ_COMPLETED',
  COURSE_COMPLETED: 'COURSE_COMPLETED',
  STREAK_MILESTONE: 'STREAK_MILESTONE',
  BADGE_EARNED: 'BADGE_EARNED',
  REVIEW_POSTED: 'REVIEW_POSTED',
  REFERRAL: 'REFERRAL',
  PROJECT_SUBMITTED: 'PROJECT_SUBMITTED',
  COMPETITION_REWARD: 'COMPETITION_REWARD'
};

exports.PostType = exports.$Enums.PostType = {
  TEXT: 'TEXT',
  ACHIEVEMENT: 'ACHIEVEMENT',
  COURSE_COMPLETION: 'COURSE_COMPLETION',
  BADGE_EARNED: 'BADGE_EARNED',
  PROJECT_SHARE: 'PROJECT_SHARE',
  QUESTION: 'QUESTION',
  TIP: 'TIP'
};

exports.ReactionType = exports.$Enums.ReactionType = {
  LIKE: 'LIKE',
  LOVE: 'LOVE',
  WOW: 'WOW',
  THINKING: 'THINKING',
  CELEBRATE: 'CELEBRATE'
};

exports.GroupType = exports.$Enums.GroupType = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  COURSE_BASED: 'COURSE_BASED'
};

exports.GroupRole = exports.$Enums.GroupRole = {
  OWNER: 'OWNER',
  MODERATOR: 'MODERATOR',
  MEMBER: 'MEMBER'
};

exports.MessageType = exports.$Enums.MessageType = {
  TEXT: 'TEXT',
  VOICE: 'VOICE',
  FILE: 'FILE',
  IMAGE: 'IMAGE',
  SYSTEM: 'SYSTEM'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  MULTIPLE_SELECT: 'MULTIPLE_SELECT',
  TRUE_FALSE: 'TRUE_FALSE',
  SHORT_ANSWER: 'SHORT_ANSWER',
  ESSAY: 'ESSAY',
  CODE: 'CODE',
  ORDERING: 'ORDERING'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  ACHIEVEMENT: 'ACHIEVEMENT',
  SOCIAL: 'SOCIAL',
  SYSTEM: 'SYSTEM'
};

exports.SubmissionStatus = exports.$Enums.SubmissionStatus = {
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  GRADED: 'GRADED',
  RETURNED: 'RETURNED'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.CompetitionType = exports.$Enums.CompetitionType = {
  SPEED_LEARNING: 'SPEED_LEARNING',
  QUIZ_BATTLE: 'QUIZ_BATTLE',
  PROJECT_CHALLENGE: 'PROJECT_CHALLENGE',
  STREAK_CHALLENGE: 'STREAK_CHALLENGE'
};

exports.CompetitionStatus = exports.$Enums.CompetitionStatus = {
  UPCOMING: 'UPCOMING',
  REGISTRATION_OPEN: 'REGISTRATION_OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  FINISHED: 'FINISHED',
  CANCELLED: 'CANCELLED'
};

exports.GoalType = exports.$Enums.GoalType = {
  STUDY_TIME: 'STUDY_TIME',
  COURSES_COMPLETED: 'COURSES_COMPLETED',
  LESSONS_COMPLETED: 'LESSONS_COMPLETED',
  XP_EARNED: 'XP_EARNED',
  STREAK_DAYS: 'STREAK_DAYS',
  CERTIFICATES_EARNED: 'CERTIFICATES_EARNED',
  BADGES_EARNED: 'BADGES_EARNED',
  QUIZZES_COMPLETED: 'QUIZZES_COMPLETED',
  PROJECTS_SUBMITTED: 'PROJECTS_SUBMITTED'
};

exports.GoalPeriod = exports.$Enums.GoalPeriod = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

exports.ChallengeType = exports.$Enums.ChallengeType = {
  STUDY_TIME: 'STUDY_TIME',
  EXERCISE_COMPLETION: 'EXERCISE_COMPLETION',
  LOGIN_STREAK: 'LOGIN_STREAK',
  COURSE_COMPLETION: 'COURSE_COMPLETION',
  LESSON_COMPLETION: 'LESSON_COMPLETION',
  QUIZ_COMPLETION: 'QUIZ_COMPLETION',
  PROJECT_SUBMISSION: 'PROJECT_SUBMISSION',
  SOCIAL_INTERACTION: 'SOCIAL_INTERACTION'
};

exports.RewardType = exports.$Enums.RewardType = {
  BADGE: 'BADGE',
  TITLE: 'TITLE',
  XP_BONUS: 'XP_BONUS',
  FEATURE_UNLOCK: 'FEATURE_UNLOCK',
  CUSTOM_AVATAR: 'CUSTOM_AVATAR',
  CERTIFICATE: 'CERTIFICATE'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  COURSE_VIEW: 'COURSE_VIEW',
  COURSE_ENROLLMENT: 'COURSE_ENROLLMENT',
  COURSE_COMPLETION: 'COURSE_COMPLETION',
  LESSON_VIEW: 'LESSON_VIEW',
  LESSON_COMPLETION: 'LESSON_COMPLETION',
  QUIZ_ATTEMPT: 'QUIZ_ATTEMPT',
  QUIZ_COMPLETION: 'QUIZ_COMPLETION',
  ASSIGNMENT_SUBMISSION: 'ASSIGNMENT_SUBMISSION',
  REVIEW_POSTED: 'REVIEW_POSTED',
  CERTIFICATE_EARNED: 'CERTIFICATE_EARNED',
  MENTOR_SESSION: 'MENTOR_SESSION',
  RESOURCE_DOWNLOAD: 'RESOURCE_DOWNLOAD',
  POST_CREATED: 'POST_CREATED',
  COMMENT_POSTED: 'COMMENT_POSTED',
  REACTION_ADDED: 'REACTION_ADDED',
  BADGE_EARNED: 'BADGE_EARNED',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  PROFILE_UPDATE: 'PROFILE_UPDATE',
  SETTINGS_CHANGE: 'SETTINGS_CHANGE'
};

exports.UploadStatus = exports.$Enums.UploadStatus = {
  PENDING: 'PENDING',
  UPLOADING: 'UPLOADING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Category: 'Category',
  Subcategory: 'Subcategory',
  Course: 'Course',
  CoursePrerequisite: 'CoursePrerequisite',
  CourseSeries: 'CourseSeries',
  CourseRelation: 'CourseRelation',
  LearningPath: 'LearningPath',
  LearningPathCourse: 'LearningPathCourse',
  LearningPathFollower: 'LearningPathFollower',
  CourseRecommendation: 'CourseRecommendation',
  Roadmap: 'Roadmap',
  RoadmapPath: 'RoadmapPath',
  RoadmapCourse: 'RoadmapCourse',
  RoadmapEnrollment: 'RoadmapEnrollment',
  RoadmapAnalytics: 'RoadmapAnalytics',
  Module: 'Module',
  Lesson: 'Lesson',
  Resource: 'Resource',
  Enrollment: 'Enrollment',
  Progress: 'Progress',
  Gamification: 'Gamification',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  XPHistory: 'XPHistory',
  Post: 'Post',
  Comment: 'Comment',
  Reaction: 'Reaction',
  Follow: 'Follow',
  Group: 'Group',
  GroupMember: 'GroupMember',
  Message: 'Message',
  MessageRecipient: 'MessageRecipient',
  Certificate: 'Certificate',
  Quiz: 'Quiz',
  Question: 'Question',
  QuizAttempt: 'QuizAttempt',
  Review: 'Review',
  Notification: 'Notification',
  Playlist: 'Playlist',
  PlaylistItem: 'PlaylistItem',
  UserAnalytics: 'UserAnalytics',
  CourseAnalytics: 'CourseAnalytics',
  LessonAnalytics: 'LessonAnalytics',
  Assignment: 'Assignment',
  Submission: 'Submission',
  MentorSession: 'MentorSession',
  Competition: 'Competition',
  CompetitionParticipant: 'CompetitionParticipant',
  UserGoal: 'UserGoal',
  DailyChallenge: 'DailyChallenge',
  UserChallenge: 'UserChallenge',
  LevelReward: 'LevelReward',
  UserLevelReward: 'UserLevelReward',
  AuditLog: 'AuditLog',
  UserActivity: 'UserActivity',
  FileUpload: 'FileUpload'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
